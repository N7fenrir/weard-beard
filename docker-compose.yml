version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: my-rabbitmq-container
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    ports:
      - "5672:5672" 
      - "15672:15672" 
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq 
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  rabbitmq-setup:
    image: rabbitmq:3-management
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    command: >
      /bin/bash -c "
        echo 'Waiting for RabbitMQ to be ready...'
        # Use rabbitmqadmin which is included in the management image
        # Connect using the service name 'rabbitmq' as the host
        rabbitmqadmin --host=rabbitmq --port=15672 --user=${RABBITMQ_USER:-guest} --password=${RABBITMQ_PASS:-guest} declare queue name=sensor_queue durable=true
        echo 'Queue sensor_queue declared successfully!'
      "

  service1:
    build:
      context: ./service1 
      dockerfile: Dockerfile
    container_name: my-service1-container
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  service2:
    build:
      context: ./service2 
      dockerfile: Dockerfile
    container_name: my-service2-container
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

volumes:
  rabbitmq_data: